{"version":3,"sources":["Logo/LogoHeader.module.scss","NavBar/NavItem.module.scss","App/App.module.scss","NavBar/NavBar.module.scss","Sections/SectionContainer.module.scss","serviceWorker.ts","NavBar/NavItem.tsx","Logo/LogoHeader.tsx","NavBar/NavBar.tsx","Sections/What/SectionWhat.tsx","Sections/Where/SectionWhere.tsx","Sections/How/SectionHow.tsx","Sections/Why/SectionWhy.tsx","Sections/Whom/SectionWhom.tsx","Sections/Who/SectionWho.tsx","Sections/SectionContainer.tsx","App/App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","NavItemId","LogoHeader","className","styles","container","logoText","NavItem","props","classes","navItem","selected","push","navItemSelected","join","onClick","type","title","NavBar","navItemClicked","navItemId","onNavItemChange","navItemElements","Array","navItems","forEach","name","currentNavItem","navItemItem","key","navBar","SectionWhat","SectionWhere","SectionHow","SectionWhy","SectionWhom","SectionWho","SectionContainer","sectionElement","section","what","where","how","why","who","whom","App","useState","none","setNavItem","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,UAAY,8BAA8B,SAAW,+B,gBCAvED,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,yBAAyB,gBAAkB,mC,kBCA1GD,EAAOC,QAAU,CAAC,IAAM,mB,gBCAxBD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,iBAAmB,6C,8JCWjBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICfMC,E,uCCQGC,EARc,WAC3B,OACE,4BAAQC,UAAWC,IAAOC,WACxB,wBAAIF,UAAWC,IAAOE,UAAtB,gB,0CDHML,O,eAAAA,I,eAAAA,I,aAAAA,I,iBAAAA,I,aAAAA,I,aAAAA,I,gBAAAA,M,KAaZ,IAWeM,EAXkB,SAACC,GAChC,IAAIC,EAAU,CAACL,IAAOM,SAItB,OAHIF,EAAMG,UACRF,EAAQG,KAAKR,IAAOS,iBAGpB,wBAAIV,UAAWM,EAAQK,KAAK,KAC5BC,QAAU,WAAQP,EAAMO,QAAQP,EAAMQ,QADtC,IACiDR,EAAMS,QEI5CC,EAjBiB,SAACV,GAE/B,IAAMW,EAAkC,SAACC,GACvCZ,EAAMa,gBAAgBD,IAGpBE,EAAkBC,QAQtB,OAPAf,EAAMgB,SAASC,SAAS,SAACL,GACvB,IAAMM,EAAOzB,EAAUmB,GACnBT,EAAWH,EAAMmB,iBAAmBP,EAClCQ,EAAe,kBAAC,EAAD,CAASC,IAAKT,EAAWT,SAAUA,EAAUK,KAAMI,EAAWH,MAAOS,EAAMX,QAASI,IACzGG,EAAgBV,KAAKgB,MAGf,yBAAKzB,UAAWC,IAAO0B,QAASR,I,gBCf3BS,EANe,SAACvB,GAC7B,OACE,sCCIWwB,EANgB,SAACxB,GAC9B,OACE,uCCIWyB,EANc,SAACzB,GAC5B,OACE,qCCIW0B,EANc,SAAC1B,GAC5B,OACE,qCCIW2B,EANe,SAAC3B,GAC7B,OACE,sCCIW4B,EANc,SAAC5B,GAC5B,OACE,qCCwCW6B,EA/B2B,SAAC7B,GAEzC,IAAI8B,EACJ,OAAQ9B,EAAM+B,SACZ,KAAKtC,EAAUuC,KACbF,EAAkB,kBAAC,EAAD,MAClB,MACF,KAAKrC,EAAUwC,MACbH,EAAkB,kBAAC,EAAD,MAClB,MACF,KAAKrC,EAAUyC,IACbJ,EAAkB,kBAAC,EAAD,MAClB,MACF,KAAKrC,EAAU0C,IACbL,EAAkB,kBAAC,EAAD,MAClB,MACF,KAAKrC,EAAU2C,IACbN,EAAkB,kBAAC,EAAD,MAClB,MACF,KAAKrC,EAAU4C,KACbP,EAAkB,kBAAC,EAAD,MAItB,OACE,6BAASnC,UAAWC,IAAOiC,kBACxBC,ICfQQ,EAlBO,WAAO,IAAD,EAEIC,mBAAoB9C,EAAU+C,MAFlC,mBAEnBtC,EAFmB,KAEVuC,EAFU,KAQpBzB,EAAW,CAACvB,EAAUuC,KAAMvC,EAAUwC,MAAOxC,EAAUyC,IAAKzC,EAAU0C,IAAK1C,EAAU2C,IAAK3C,EAAU4C,MAC1G,OACE,yBAAK1C,UAAWC,IAAO8C,KACrB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQ1B,SAAUA,EAAUG,eAAgBjB,EAASW,gBARjB,SAACD,GACvC6B,EAAW7B,MAQT,kBAAC,EAAD,CAAkBmB,QAAS7B,MCbjCyC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SZoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f6dbf3a0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LogoHeader_container__3m3d2\",\"logoText\":\"LogoHeader_logoText__30S-0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navItem\":\"NavItem_navItem__1BBrf\",\"scaleUp\":\"NavItem_scaleUp__1M1H0\",\"navItemSelected\":\"NavItem_navItemSelected__3qa3f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app___B2LQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBar\":\"NavBar_navBar__463ye\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SectionContainer\":\"SectionContainer_SectionContainer__2SNdE\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport styles from './NavItem.module.scss';\n\nexport enum NavItemId {\n  none, what, who, where, how, why, whom\n}\n\nexport type NavItemCallback = (navItem: NavItemId) => void;\n\ninterface Props {\n  type: NavItemId;\n  selected: boolean;\n  title: string;  \n  onClick: NavItemCallback;\n}\n\nconst NavItem: React.FC<Props> = (props) => {\n  let classes = [styles.navItem];\n  if (props.selected) {\n    classes.push(styles.navItemSelected);\n  } \n  return (\n    <h1 className={classes.join(' ')}\n    onClick={ () => { props.onClick(props.type)} }> {props.title}</h1 >\n  );\n}\n\nexport default NavItem;\n","import React from 'react';\nimport styles from './LogoHeader.module.scss';\n\nconst LogoHeader: React.FC = () => {\n  return (\n    <header className={styles.container} >\n      <h1 className={styles.logoText}>AppConcept</h1>\n    </header>\n  );\n}\n\nexport default LogoHeader;\n","import React from 'react';\nimport styles from './NavBar.module.scss';\nimport NavItem, { NavItemId, NavItemCallback } from './NavItem';\n\ninterface Props {\n  navItems: NavItemId[];\n  currentNavItem: NavItemId;\n  onNavItemChange: NavItemCallback;\n}\n\nconst NavBar: React.FC<Props> = (props) => {\n\n  const navItemClicked: NavItemCallback = (navItemId: NavItemId) => {\n    props.onNavItemChange(navItemId);\n  }\n\n  let navItemElements = Array<React.ReactNode>();\n  props.navItems.forEach( (navItemId) => {    \n    const name = NavItemId[navItemId];\n    let selected = props.currentNavItem === navItemId;\n    const navItemItem = (<NavItem key={navItemId} selected={selected} type={navItemId} title={name} onClick={navItemClicked} />);\n    navItemElements.push(navItemItem);\n  });\n\n  return (<div className={styles.navBar}>{navItemElements}</div>);\n}\n\nexport default NavBar;\n","import React from 'react';\n// import styles from './SectionWhat.module.scss';\n\nconst SectionWhat: React.FC = (props) => {\n  return (\n    <div>What</div>\n  );\n}\n\nexport default SectionWhat;\n","import React from 'react';\n// import styles from './SectionWhere.module.scss';\n\nconst SectionWhere: React.FC = (props) => {\n  return (\n    <div>Where</div>\n  );\n}\n\nexport default SectionWhere;\n","import React from 'react';\n// import styles from './SectionHow.module.scss';\n\nconst SectionHow: React.FC = (props) => {\n  return (\n    <div>How</div>\n  );\n}\n\nexport default SectionHow;\n","import React from 'react';\n// import styles from './SectionWhy.module.scss';\n\nconst SectionWhy: React.FC = (props) => {\n  return (\n    <div>Why</div>\n  );\n}\n\nexport default SectionWhy;\n","import React from 'react';\n// import styles from './SectionWhom.module.scss';\n\nconst SectionWhom: React.FC = (props) => {\n  return (\n    <div>Whom</div>\n  );\n}\n\nexport default SectionWhom;\n","import React from 'react';\n// import styles from './SectionWho.module.scss';\n\nconst SectionWho: React.FC = (props) => {\n  return (\n    <div>Who</div>\n  );\n}\n\nexport default SectionWho;\n","import React from 'react';\nimport styles from './SectionContainer.module.scss';\nimport { NavItemId } from '../NavBar/NavItem';\nimport SectionWhat from './What/SectionWhat';\nimport SectionWhere from './Where/SectionWhere';\nimport SectionHow from './How/SectionHow';\nimport SectionWhy from './Why/SectionWhy';\nimport SectionWhom from './Whom/SectionWhom';\nimport SectionWho from './Who/SectionWho';\n\ninterface Props {\n  section: NavItemId;\n}\n\nconst SectionContainer: React.FC<Props> = (props) => {\n\n  let sectionElement: React.ReactNode;\n  switch (props.section) {\n    case NavItemId.what:\n      sectionElement = (<SectionWhat/>);\n      break;\n    case NavItemId.where:\n      sectionElement = (<SectionWhere/>);\n      break;\n    case NavItemId.how:\n      sectionElement = (<SectionHow/>);\n      break;\n    case NavItemId.why:\n      sectionElement = (<SectionWhy/>);\n      break;\n    case NavItemId.who:\n      sectionElement = (<SectionWho/>);\n      break;\n    case NavItemId.whom:\n      sectionElement = (<SectionWhom/>);\n      break;\n  }\n\n  return (\n    <section className={styles.SectionContainer}>\n      {sectionElement}\n    </section>\n  );\n}\n\nexport default SectionContainer;\n","import React, { useState } from 'react';\nimport styles from './App.module.scss';\nimport LogoHeader from '../Logo/LogoHeader';\nimport NavBar from '../NavBar/NavBar';\nimport { NavItemCallback, NavItemId } from '../NavBar/NavItem';\nimport SectionContainer from '../Sections/SectionContainer';\n\nconst App: React.FC = () => {\n\n  const [navItem, setNavItem] = useState<NavItemId>(NavItemId.none);\n\n  const navItemChanged: NavItemCallback = (navItemId: NavItemId) => {\n    setNavItem(navItemId);    \n  };\n\n  const navItems = [NavItemId.what, NavItemId.where, NavItemId.how, NavItemId.why, NavItemId.who, NavItemId.whom];\n  return (\n    <div className={styles.app}>\n      <LogoHeader />\n      <NavBar navItems={navItems} currentNavItem={navItem} onNavItemChange={navItemChanged}/>\n      <SectionContainer section={navItem} />\n    </div>\n  );  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/Colors.css';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
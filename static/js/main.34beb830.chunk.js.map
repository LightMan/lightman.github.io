{"version":3,"sources":["App.module.scss","LogoHeader.module.scss","SectionsList.module.scss","SectionItem.module.scss","SectionInfo.module.scss","SectionsList.tsx","LogoHeader.tsx","SectionItem.tsx","SectionInfo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SectionType","LogoHeader","className","styles","container","SectionsList","props","sections","children","SectionItem","sectionItem","onClick","SectionInfo","section","App","useState","none","setSection","console","log","app","what","who","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,IAAM,mB,gBCAxBD,EAAOC,QAAU,CAAC,UAAY,gC,gBCA9BD,EAAOC,QAAU,CAAC,SAAW,iC,gBCA7BD,EAAOC,QAAU,CAAC,YAAc,mC,gBCAhCD,EAAOC,QAAU,CAAC,YAAc,mC,gGCEpBC,E,+ECQGC,EARc,WAC3B,OACE,yBAAKC,UAAWC,IAAOC,WACrB,4C,0BDHMJ,O,eAAAA,I,eAAAA,I,aAAAA,I,iBAAAA,I,aAAAA,I,cAAAA,M,KAIZ,IAQeK,EARgB,SAACC,GAC9B,OACE,yBAAKJ,UAAWC,IAAOI,UACpBD,EAAME,W,gBEKEC,EANsB,SAACH,GACpC,OACE,wBAAIJ,UAAWC,IAAOO,YAAaC,QAASL,EAAMK,SAAUL,EAAME,W,gBCKvDI,EARsB,SAACN,GACpC,OACE,yBAAKJ,UAAWC,IAAOS,aAAvB,YACYZ,EAAYM,EAAMO,WCsBnBC,EA1BO,WAAO,IAAD,EAEIC,mBAAsBf,EAAYgB,MAFtC,mBAEnBH,EAFmB,KAEVI,EAFU,KAc1B,OAFAC,QAAQC,IAAI,kBAAmBnB,EAAYa,IAGzC,yBAAKX,UAAWC,IAAOiB,KACrB,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAaT,QAdkB,WACnCM,EAAWjB,EAAYqB,QAanB,QACA,kBAAC,EAAD,CAAaV,QAXiB,WAClCM,EAAWjB,EAAYsB,OAUnB,QAEF,kBAAC,EAAD,CAAaT,QAASA,MChBRU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.34beb830.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2ziFi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LogoHeader_container__1ck6-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sections\":\"SectionsList_sections__W2qJE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionItem\":\"SectionItem_sectionItem__pCzFi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SectionInfo\":\"SectionInfo_SectionInfo__1dycM\"};","import React from 'react';\nimport styles from './SectionsList.module.scss';\n\nexport enum SectionType {\n  none, what, who, where, how, why\n}\n\nconst SectionsList: React.FC = (props) => {    \n  return (\n    <div className={styles.sections}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default SectionsList;\n","import React from 'react';\nimport styles from './LogoHeader.module.scss';\n\nconst LogoHeader: React.FC = () => {\n  return (\n    <div className={styles.container} >\n      <h1>AppConcept</h1>\n    </div>\n  );\n}\n\nexport default LogoHeader;\n","import React from 'react';\nimport styles from './SectionItem.module.scss';\n\nexport type SectionCallback = () => void;\n\ninterface Props {\n  onClick: SectionCallback;\n}\n\nconst SectionItem: React.FC<Props> = (props) => {\n  return (\n    <h2 className={styles.sectionItem} onClick={props.onClick}>{props.children}</h2>\n  );\n}\n\nexport default SectionItem;\n","import React from 'react';\nimport styles from './SectionInfo.module.scss';\nimport { SectionType } from './SectionsList';\n\ninterface Props {\n  section: SectionType;\n}\n\nconst SectionInfo: React.FC<Props> = (props) => {\n  return (\n    <div className={styles.SectionInfo}>\n      Info for {SectionType[props.section]}\n    </div>\n  );\n}\n\nexport default SectionInfo;\n","import React, { useState } from 'react';\nimport styles from './App.module.scss';\nimport LogoHeader from './LogoHeader';\nimport SectionsList, { SectionType } from './SectionsList';\nimport SectionItem, { SectionCallback } from './SectionItem';\nimport SectionInfo from './SectionInfo';\n\nconst App: React.FC = () => {\n\n  const [section, setSection] = useState<SectionType>(SectionType.none);\n\n  const clickedWhat: SectionCallback = () => {\n    setSection(SectionType.what);\n  };\n\n  const clickedWho: SectionCallback = () => {\n    setSection(SectionType.who);\n  };\n\n  console.log('Current section', SectionType[section]);\n\n  return (\n    <div className={styles.app}>\n      <LogoHeader />\n      <SectionsList>\n        <SectionItem onClick={clickedWhat}>What</SectionItem>\n        <SectionItem onClick={clickedWho}>Who</SectionItem>\n      </SectionsList>\n      <SectionInfo section={section} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["LogoHeader.module.scss","App.module.scss","SectionsList.module.scss","SectionItem.module.scss","SectionInfo.module.scss","SectionItem.tsx","LogoHeader.tsx","SectionsList.tsx","SectionWhat.tsx","SectionInfo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SectionType","LogoHeader","className","styles","container","logoText","SectionItem","props","sectionItem","onClick","type","title","SectionsList","sectionClicked","sectionType","onSectionChange","sectionElements","Array","sections","forEach","name","key","push","SectionWhat","SectionInfo","sectionElement","section","what","App","useState","none","setSection","where","app","currentSection","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,UAAY,8BAA8B,SAAW,+B,kBCAvED,EAAOC,QAAU,CAAC,IAAM,mB,gBCAxBD,EAAOC,QAAU,CAAC,SAAW,iC,gBCA7BD,EAAOC,QAAU,CAAC,YAAc,mC,gBCAhCD,EAAOC,QAAU,CAAC,YAAc,mC,kHCEpBC,E,qFCQGC,EARc,WAC3B,OACE,4BAAQC,UAAWC,IAAOC,WACxB,wBAAIF,UAAWC,IAAOE,UAAtB,gB,0CDHML,O,eAAAA,I,eAAAA,I,aAAAA,I,iBAAAA,I,aAAAA,I,cAAAA,M,KAYZ,IAOeM,EAPsB,SAACC,GACpC,OACE,wBAAIL,UAAWC,IAAOK,YACtBC,QAAU,WAAQF,EAAME,QAAQF,EAAMG,QADtC,IACiDH,EAAMI,QEQ5CC,EAhBuB,SAACL,GAErC,IAAMM,EAAkC,SAACC,GACvCP,EAAMQ,gBAAgBD,IAGpBE,EAAkBC,QAOtB,OANAV,EAAMW,SAASC,SAAS,SAACL,GACvB,IAAMM,EAAOpB,EAAYc,GACnBN,EAAe,kBAAC,EAAD,CAAaa,IAAKP,EAAaJ,KAAMI,EAAaH,MAAOS,EAAMX,QAASI,IAC7FG,EAAgBM,KAAKd,MAGf,yBAAKN,UAAWC,IAAOe,UAAWF,I,gBCd7BO,EANe,SAAChB,GAC7B,OACE,sCCiBWiB,EAbsB,SAACjB,GAEpC,IAAIkB,EAAiB,wCAIrB,OAHIlB,EAAMmB,UAAY1B,EAAY2B,OAChCF,EAAiB,kBAAC,EAAD,OAGjB,6BAASvB,UAAWC,IAAOqB,aACxBC,ICQQG,EAlBO,WAAO,IAAD,EAEIC,mBAAsB7B,EAAY8B,MAFtC,mBAEnBJ,EAFmB,KAEVK,EAFU,KAQpBb,EAAW,CAAClB,EAAY2B,KAAM3B,EAAYgC,OAChD,OACE,yBAAK9B,UAAWC,IAAO8B,KACrB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAcf,SAAUA,EAAUgB,eAAgBR,EAASX,gBARvB,SAACD,GACvCiB,EAAWjB,MAQT,kBAAC,EAAD,CAAaY,QAASA,MCRRS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1d83d79e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LogoHeader_container__1ck6-\",\"logoText\":\"LogoHeader_logoText__NoPlC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2ziFi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sections\":\"SectionsList_sections__W2qJE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionItem\":\"SectionItem_sectionItem__pCzFi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SectionInfo\":\"SectionInfo_SectionInfo__1dycM\"};","import React from 'react';\nimport styles from './SectionItem.module.scss';\n\nexport enum SectionType {\n  none, what, who, where, how, why\n}\n\nexport type SectionCallback = (section: SectionType) => void;\n\ninterface Props {\n  type: SectionType;\n  title: string;  \n  onClick: SectionCallback;\n}\n\nconst SectionItem: React.FC<Props> = (props) => {\n  return (\n    <h1 className={styles.sectionItem}\n    onClick={ () => { props.onClick(props.type)} }> {props.title}</h1 >\n  );\n}\n\nexport default SectionItem;\n","import React from 'react';\nimport styles from './LogoHeader.module.scss';\n\nconst LogoHeader: React.FC = () => {\n  return (\n    <header className={styles.container} >\n      <h1 className={styles.logoText}>AppConcept</h1>\n    </header>\n  );\n}\n\nexport default LogoHeader;\n","import React from 'react';\nimport styles from './SectionsList.module.scss';\nimport SectionItem, { SectionType, SectionCallback } from './SectionItem';\n\ninterface Props {\n  sections: SectionType[];\n  currentSection: SectionType;\n  onSectionChange: SectionCallback;\n}\n\nconst SectionsList: React.FC<Props> = (props) => {\n\n  const sectionClicked: SectionCallback = (sectionType: SectionType) => {\n    props.onSectionChange(sectionType);\n  }\n\n  let sectionElements = Array<React.ReactNode>();\n  props.sections.forEach( (sectionType) => {\n    const name = SectionType[sectionType];\n    const sectionItem = (<SectionItem key={sectionType} type={sectionType} title={name} onClick={sectionClicked} />);\n    sectionElements.push(sectionItem);\n  });\n\n  return (<div className={styles.sections}>{sectionElements}</div>);\n}\n\nexport default SectionsList;\n","import React from 'react';\n// import styles from './SectionWhat.module.scss';\n\nconst SectionWhat: React.FC = (props) => {\n  return (\n    <div>What</div>\n  );\n}\n\nexport default SectionWhat;\n","import React from 'react';\nimport styles from './SectionInfo.module.scss';\nimport { SectionType } from './SectionItem';\nimport SectionWhat from './SectionWhat';\n\ninterface Props {\n  section: SectionType;\n}\n\nconst SectionInfo: React.FC<Props> = (props) => {\n\n  let sectionElement = <div>unknown</div>;\n  if (props.section === SectionType.what) {\n    sectionElement = <SectionWhat />\n  }\n  return (\n    <section className={styles.SectionInfo}>\n      {sectionElement}\n    </section>\n  );\n}\n\nexport default SectionInfo;\n","import React, { useState } from 'react';\nimport styles from './App.module.scss';\nimport LogoHeader from './LogoHeader';\nimport SectionsList from './SectionsList';\nimport { SectionCallback, SectionType } from './SectionItem';\nimport SectionInfo from './SectionInfo';\n\nconst App: React.FC = () => {\n\n  const [section, setSection] = useState<SectionType>(SectionType.none);\n\n  const sectionChanged: SectionCallback = (sectionType: SectionType) => {\n    setSection(sectionType);    \n  };\n\n  const sections = [SectionType.what, SectionType.where];\n  return (\n    <div className={styles.app}>\n      <LogoHeader />\n      <SectionsList sections={sections} currentSection={section} onSectionChange={sectionChanged}/>\n      <SectionInfo section={section} />\n    </div>\n  );  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Colors.css';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}